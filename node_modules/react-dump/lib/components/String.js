'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = 'src/components/String.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Table = require('./Table');

var _Table2 = _interopRequireDefault(_Table);

var _Row = require('./Row');

var _Row2 = _interopRequireDefault(_Row);

var _escapeHtml = require('./escapeHtml');

var _escapeHtml2 = _interopRequireDefault(_escapeHtml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultProps = {
  obj: null,
  opts: {
    label: 'String',
    expand: true
  }
};

var String = function (_React$Component) {
  _inherits(String, _React$Component);

  function String() {
    _classCallCheck(this, String);

    return _possibleConstructorReturn(this, (String.__proto__ || Object.getPrototypeOf(String)).apply(this, arguments));
  }

  _createClass(String, [{
    key: 'render',

    //var val = '<pre><code class="lang-html">' + hljs.highlight('xml', obj).value + '</code></pre>';
    value: function render() {
      if (this.props.obj.length !== 0) {
        return _react2.default.createElement(
          _Table2.default,
          { className: 'reactdump reactdump-String', __source: {
              fileName: _jsxFileName,
              lineNumber: 19
            },
            __self: this
          },
          _react2.default.createElement(
            _Row2.default,
            { className: 'reactdump-label reactdump-String', label: this.props.opts.label, expand: this.props.opts.expand, expandCell: this.props.opts.expand, __source: {
                fileName: _jsxFileName,
                lineNumber: 20
              },
              __self: this
            },
            (0, _escapeHtml2.default)(this.props.obj)
          )
        );
      }
      return _react2.default.createElement(
        _Table2.default,
        { dataType: 'String', __source: {
            fileName: _jsxFileName,
            lineNumber: 27
          },
          __self: this
        },
        _react2.default.createElement(
          _Row2.default,
          { dataType: 'String', __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            },
            __self: this
          },
          '[empty]'
        )
      );
    }
  }]);

  return String;
}(_react2.default.Component);

exports.default = String;


String.defaultProps = defaultProps;