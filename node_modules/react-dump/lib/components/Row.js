'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = 'src/components/Row.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// assigned to component after component definition, no hoisting within
var defaultProps = {
  className: '',
  label: 'row need label pls',
  expand: true,
  expandCell: true,
  toggleRow: null,
  title: '',
  cols: '2'
};

var Row = function (_React$Component) {
  _inherits(Row, _React$Component);

  function Row() {
    _classCallCheck(this, Row);

    return _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).apply(this, arguments));
  }

  _createClass(Row, [{
    key: 'render',
    value: function render() {
      switch (this.props.cols) {
        case '1':
          if (this.props.expand) {
            return _react2.default.createElement(
              'tr',
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 21
                },
                __self: this
              },
              _react2.default.createElement(
                'td',
                { className: 'reactdump-data', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 22
                  },
                  __self: this
                },
                this.props.children
              )
            );
          }
          return _react2.default.createElement(
            'tr',
            { style: { display: 'none' }, __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              },
              __self: this
            },
            _react2.default.createElement(
              'td',
              { className: 'reactdump-data', style: { display: 'none' }, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 30
                },
                __self: this
              },
              this.props.children
            )
          );

        default:
          if (this.props.expand) {
            return _react2.default.createElement(
              'tr',
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 39
                },
                __self: this
              },
              _react2.default.createElement(
                'td',
                { className: this.props.className, title: this.props.title, onClick: this.props.toggleRow, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                  },
                  __self: this
                },
                this.props.label
              ),
              _react2.default.createElement(
                'td',
                { className: 'reactdump-data', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                  },
                  __self: this
                },
                this.props.children
              )
            );
          }
          return _react2.default.createElement(
            'tr',
            { style: { display: 'none' }, __source: {
                fileName: _jsxFileName,
                lineNumber: 48
              },
              __self: this
            },
            _react2.default.createElement(
              'td',
              { className: this.props.className, style: { fontStyle: 'italic' }, title: this.props.title, onClick: this.props.toggleRow, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                },
                __self: this
              },
              this.props.label
            ),
            _react2.default.createElement(
              'td',
              { className: 'reactdump-data', style: { display: 'none' }, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 50
                },
                __self: this
              },
              this.props.children
            )
          );

      } // /switch
    }
  }]);

  return Row;
}(_react2.default.Component);

exports.default = Row;

Row.defaultProps = defaultProps;