'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = 'src/components/ReactDump.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DataTyper = require('./DataTyper');

var _DataTyper2 = _interopRequireDefault(_DataTyper);

require('./ReactDump.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// assigned to component after component definition, no hoisting within
var defaultProps = {
  obj: null // the variable to be dumped
  , expand: true // expands views
  , label: '' // string header for the dump output
};
/* not implemented yet
, output: 'browser' // where to send results browser|console|file
, format: 'html' // output text or HTML format
, hide: null // hide column or keys
, keys: null // For a structure, number of keys to display
, show: null // show column or keys
, top: null // The number of rows to display. For a structure, this is the number of nested levels to display (useful for large stuctures)
*/

var ReactDump = function (_React$Component) {
  _inherits(ReactDump, _React$Component);

  function ReactDump() {
    _classCallCheck(this, ReactDump);

    return _possibleConstructorReturn(this, (ReactDump.__proto__ || Object.getPrototypeOf(ReactDump)).apply(this, arguments));
  }

  _createClass(ReactDump, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          obj = _props.obj,
          opts = _objectWithoutProperties(_props, ['obj']);

      var cache = {
        bFilteredLevel: false,
        level: 0,
        objects: [],
        paths: []
      };
      return _react2.default.createElement(_DataTyper2.default, { obj: obj, opts: opts, cache: cache, currentPath: ['[TOP]'], __source: {
          fileName: _jsxFileName,
          lineNumber: 30
        },
        __self: this
      });
    }
  }]);

  return ReactDump;
}(_react2.default.Component);

exports.default = ReactDump;


ReactDump.defaultProps = defaultProps;